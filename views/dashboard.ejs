<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Message Translator Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        .chat-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .chat-body {
            flex: 1;
            display: flex;
            overflow: hidden;
        }
        .sidebar {
            width: 300px;
            background: #f8f9fa;
            border-right: 1px solid #e9ecef;
            display: flex;
            flex-direction: column;
        }
        .sidebar-header {
            padding: 1rem;
            background: white;
            border-bottom: 1px solid #e9ecef;
        }
        .users-list {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
        }
        .user-item {
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            border: 2px solid transparent;
        }
        .user-item:hover {
            background: #e3f2fd;
            transform: translateY(-1px);
        }
        .user-item.selected {
            background: #2196f3;
            color: white;
            border-color: #1976d2;
        }
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }
        .chat-messages {
            flex: 1;
            padding: 1rem;
            overflow-y: auto;
            background: #fafafa;
            background-image: 
                radial-gradient(circle at 1px 1px, rgba(0,0,0,0.05) 1px, transparent 0);
            background-size: 20px 20px;
        }
        .message {
            max-width: 70%;
            margin-bottom: 1rem;
            animation: fadeIn 0.3s ease-in;
        }
        .message-sent {
            margin-left: auto;
        }
        .message-received {
            margin-right: auto;
        }
        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
        }
        .message-sent .message-bubble {
            background: linear-gradient(135deg, #2196f3, #1976d2);
            color: white;
        }
        .message-received .message-bubble {
            background: white;
            color: #333;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .message-info {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-bottom: 0.25rem;
        }
        .message-sent .message-info {
            text-align: right;
        }
        .original-text {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px solid rgba(255,255,255,0.2);
        }
        .message-received .original-text {
            border-top-color: rgba(0,0,0,0.1);
        }
        .chat-input {
            padding: 1rem;
            background: white;
            border-top: 1px solid #e9ecef;
        }
        .input-group {
            background: #f8f9fa;
            border-radius: 25px;
            padding: 0.5rem;
        }
        .form-control {
            border: none;
            background: transparent;
            box-shadow: none;
        }
        .form-control:focus {
            border: none;
            box-shadow: none;
            background: transparent;
        }
        .btn-send {
            border-radius: 50%;
            width: 40px;
            height: 40px;
            padding: 0;
            background: linear-gradient(135deg, #2196f3, #1976d2);
            border: none;
        }
        .btn-send:hover {
            background: linear-gradient(135deg, #1976d2, #1565c0);
        }
        .empty-chat {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            color: #999;
        }
        .online-indicator {
            width: 8px;
            height: 8px;
            background: #4caf50;
            border-radius: 50%;
            display: inline-block;
            margin-right: 0.5rem;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @media (max-width: 768px) {
            .sidebar {
                width: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Header -->
        <div class="chat-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-0">
                        <i class="bi bi-translate me-2"></i>
                        Message Translator
                    </h4>
                </div>
                <div class="d-flex align-items-center">
                    <span class="me-3" id="userInfo">
                        <i class="bi bi-person-circle me-1"></i>
                    </span>
                    <button class="btn btn-outline-light btn-sm" onclick="logout()">
                        <i class="bi bi-box-arrow-right me-1"></i>
                        Logout
                    </button>
                </div>
            </div>
        </div>

        <!-- Chat Body -->
        <div class="chat-body">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="sidebar-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-people me-1"></i>
                            Online Users
                        </h6>
                        <button class="btn btn-sm btn-outline-secondary" onclick="loadUsers()">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </div>
                </div>
                <div class="users-list" id="usersList">
                    <div class="text-center py-4">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2 text-muted">Loading users...</div>
                    </div>
                </div>
            </div>

            <!-- Main Chat Area -->
            <div class="chat-main">
                <div class="chat-messages" id="messagesContainer">
                    <div class="empty-chat">
                        <i class="bi bi-chat-dots" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                        <h5>Welcome to Message Translator!</h5>
                        <p class="text-center">Select a user from the sidebar to start chatting.<br>
                        Your messages will be automatically translated to their language.</p>
                    </div>
                </div>

                <!-- Message Input -->
                <div class="chat-input">
                    <form id="messageForm">
                        <div class="input-group">
                            <input type="text" class="form-control" id="messageInput" 
                                   placeholder="Type your message..." disabled>
                            <button type="submit" class="btn btn-send" disabled id="sendBtn">
                                <i class="bi bi-send-fill text-white"></i>
                            </button>
                        </div>
                    </form>
                    <div class="text-center mt-2">
                        <small class="text-muted" id="selectedUserInfo">
                            Select a user to start messaging
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="messageToast" class="toast" role="alert">
            <div class="toast-header">
                <i class="bi bi-info-circle-fill text-primary me-2"></i>
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastBody"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentUser = null;
        let users = [];
        let messages = [];
        let selectedUser = null;
        let messageRefreshInterval;

        // Load current user info
        async function loadCurrentUser() {
            try {
                const response = await fetch('/api/me');
                if (response.ok) {
                    currentUser = await response.json();
                    document.getElementById('userInfo').innerHTML = `
                        <i class="bi bi-person-circle me-1"></i>
                        ${currentUser.name} <span class="opacity-75">(${currentUser.language})</span>
                    `;
                } else {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Error loading user:', error);
                window.location.href = '/login';
            }
        }

        // Load users
        async function loadUsers() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const data = await response.json();
                    users = data.users;
                    displayUsers();
                }
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }

        // Display users
        function displayUsers() {
            const usersList = document.getElementById('usersList');
            if (users.length === 0) {
                usersList.innerHTML = `
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-people" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                        <div>No other users online</div>
                        <small>Invite friends to start chatting!</small>
                    </div>
                `;
                return;
            }

            usersList.innerHTML = users.map(user => `
                <div class="user-item ${selectedUser && selectedUser.id === user.id ? 'selected' : ''}" 
                     onclick="selectUser(${user.id}, '${user.name}', '${user.language}')">
                    <div class="d-flex align-items-center">
                        <div class="me-2">
                            <span class="online-indicator"></span>
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-semibold">${user.name}</div>
                            <small class="text-muted">
                                <i class="bi bi-translate me-1"></i>${user.language}
                            </small>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Select user to chat with
        function selectUser(userId, userName, userLanguage) {
            selectedUser = { id: userId, name: userName, language: userLanguage };
            
            // Update UI
            document.querySelectorAll('.user-item').forEach(item => item.classList.remove('selected'));
            event.currentTarget.classList.add('selected');
            
            // Enable message input
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');
            messageInput.disabled = false;
            sendBtn.disabled = false;
            messageInput.placeholder = `Message ${userName}...`;
            messageInput.focus();
            
            // Update selected user info
            document.getElementById('selectedUserInfo').innerHTML = `
                <i class="bi bi-arrow-right me-1"></i>
                Chatting with <strong>${userName}</strong> (${userLanguage})
                <i class="bi bi-translate ms-1"></i>
            `;
            
            // Load messages for this conversation
            loadMessages();
        }

        // Load messages
        async function loadMessages() {
            try {
                const response = await fetch('/api/messages');
                if (response.ok) {
                    const data = await response.json();
                    messages = data.messages;
                    displayMessages();
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Display messages
        function displayMessages() {
            const container = document.getElementById('messagesContainer');
            
            if (!selectedUser) {
                container.innerHTML = `
                    <div class="empty-chat">
                        <i class="bi bi-chat-dots" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                        <h5>Welcome to Message Translator!</h5>
                        <p class="text-center">Select a user from the sidebar to start chatting.<br>
                        Your messages will be automatically translated to their language.</p>
                    </div>
                `;
                return;
            }

            // Filter messages for selected conversation
            const conversationMessages = messages.filter(msg => 
                (msg.isSent && selectedUser && msg.recipientName === selectedUser.name) ||
                (!msg.isSent && selectedUser && msg.senderName === selectedUser.name)
            );

            if (conversationMessages.length === 0) {
                container.innerHTML = `
                    <div class="empty-chat">
                        <i class="bi bi-chat-heart" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                        <h5>Start a conversation with ${selectedUser.name}</h5>
                        <p class="text-center">Your messages will be translated from ${currentUser.language} to ${selectedUser.language}</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = conversationMessages.map(msg => {
                const messageClass = msg.isSent ? 'message-sent' : 'message-received';
                const time = new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                return `
                    <div class="message ${messageClass}">
                        <div class="message-info">
                            ${msg.isSent ? 'You' : msg.senderName} • ${time}
                        </div>
                        <div class="message-bubble">
                            <div>${msg.displayMessage}</div>
                            ${!msg.isSent && msg.originalMessage !== msg.translatedMessage ? 
                                `<div class="original-text">
                                    <i class="bi bi-translate me-1"></i>
                                    Original: "${msg.originalMessage}"
                                </div>` : ''}
                        </div>
                    </div>
                `;
            }).join('');
            
            container.scrollTop = container.scrollHeight;
        }

        // Send message
        document.getElementById('messageForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!selectedUser) {
                showToast('Please select a user to message');
                return;
            }
            
            const message = document.getElementById('messageInput').value.trim();
            if (!message) return;

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        recipientId: selectedUser.id,
                        message: message
                    })
                });

                const result = await response.json();

                if (result.success) {
                    document.getElementById('messageInput').value = '';
                    loadMessages();
                } else {
                    showToast('Failed to send message: ' + result.error);
                }
            } catch (error) {
                showToast('Network error. Please try again.');
                console.error('Error sending message:', error);
            }
        });

        // Show toast notification
        function showToast(message) {
            document.getElementById('toastBody').textContent = message;
            const toast = new bootstrap.Toast(document.getElementById('messageToast'));
            toast.show();
        }

        // Logout
        async function logout() {
            try {
                const response = await fetch('/api/logout', { method: 'POST' });
                if (response.ok) {
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Logout error:', error);
                window.location.href = '/login';
            }
        }

        // Auto-refresh users every 30 seconds
        setInterval(loadUsers, 30000);

        // Auto-refresh messages every 5 seconds when user is selected
        setInterval(() => {
            if (selectedUser) {
                loadMessages();
            }
        }, 5000);

        // Initialize dashboard
        window.addEventListener('load', () => {
            loadCurrentUser();
            loadUsers();
        });

        // Handle Enter key in message input
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                document.getElementById('messageForm').dispatchEvent(new Event('submit'));
            }
        });
    </script>
</body>
</html>
